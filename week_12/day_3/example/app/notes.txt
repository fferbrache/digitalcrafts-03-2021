# Intro to Redux

# How to setup Redux for your React Project
Step 1 - npm install redux@next react-redux@next 
Wrap in a provider
Step 2 - Import in your `index.js` Provider and createStroe
Step 3 - Wrap your `<App />` with `<Provider> <App /> </Provider>`
Step 4 - Create an instance of your store and put it in a stor variable.
Step 5 - Create a new folder called `reducers`, inside of that folder create a file called `rootReducer.js`
Step 6 - Go to your `rootReducer` fuile. Create your `initialState` object.
Step 7 - Create your `rootReducer` function
Step 8 - Your rootReducer function has two parameters, `(state=initialState, action)`.
Step 9 - In your `rootReducer` body, create a `switch` statement. You will create a `case` for each action your reducers can do for your state. 
Step 10 - Export your 1`rootReducer`.
Step 11 - Import your `rootReducer` in your `index.js`. Pass the rootReducer to your `createStore(rootReducer)`.
Step 12 - Pass your `store` to your `Provider` as a prop. 
Step 13 - You have finished setting up redux for your application.

# Use Redux in your components
Step 1 - Import `useSelector, useDispatch` from `react-redux`
Step 2 - Assign to a variable whatever state value you want to select. (`const counter = useSelector(state => state. counter)`)
Step 3 - You can now display that state variable by putting it in your JSX inside curly braces. `{counter}`

# Change a state variable in Redux from our component
Step 1 - Import `useDispatch` from `react-redux`.
Step 2 - Create and instance of `const dispatch = useDispatch()`
Step 3 - Attach `useDispatch` to whatever function or event handler will change that state.
Step 4 - Pass `dispatch` and object with a type that is referencing one of your `rootReducer` switch cases. (`dispatch({type: "ADD"})`)
